AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Deck Consultant Backend

Globals:
  Function:
    Runtime: ruby3.2
    MemorySize: 128
    Environment:
      Variables:
        environment: production
    Layers:
      - !Ref DeckConsultantLayer
    Timeout: 10

Resources:
  DeckConsultantLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: deck-consultant
      ContentUri: layer/

  CreateUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deck-consultant-create-user
      CodeUri: lambdas/create_user/
      Handler: app.create_user
      Timeout: 15

  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deck-consultant-get-user
      CodeUri: lambdas/get_user/
      Handler: app.get_user
      Timeout: 15

  UpdateUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deck-consultant-update-user
      CodeUri: lambdas/update_user/
      Handler: app.update_user
      Timeout: 15

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: deck-consultant-user-pool
      UsernameConfiguration:
        CaseSensitive: false
      AliasAttributes:
       - preferred_username
       - email
      AutoVerifiedAttributes:
        - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: preferred_username
          AttributeDataType: String
          Mutable: true
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: deck-consultant-user-pool-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: deck-consultant-identity-pool
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
      AllowUnauthenticatedIdentities: true

  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: cognito-unauthorized-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"

  # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
  # Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: deck-consultant-authorized-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "InvokeDeckConsultantLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt CreateUser.Arn
                  - !GetAtt GetUser.Arn
                  - !GetAtt UpdateUser.Arn
